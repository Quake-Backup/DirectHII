

qboolean VID_BeginRendering (void);
void VID_EndRendering (void);


#define MAX_EXTRA_TEXTURES 156   // 255-100+1
extern int gl_extra_textures[MAX_EXTRA_TEXTURES];   // generic textures for models

typedef struct glpic_s {
	int texnum;
	float	sl, tl, sh, th;
} glpic_t;


// r_local.h -- private refresh defs

#define ALIAS_BASE_SIZE_RATIO		(1.0 / 11.0)
// normalizing factor so player model works out to about
//  1 pixel per triangle
#define MAX_SKIN_HEIGHT 480

#define TILE_SIZE		128		// size of textures generated by R_GenTiledSurf

#define SKYSHIFT		7
#define	SKYSIZE			(1 << SKYSHIFT)
#define SKYMASK			(SKYSIZE - 1)

#define BACKFACE_EPSILON	0.01


void R_TimeRefresh_f (void);
void R_ReadPointFile_f (void);


//====================================================


extern	entity_t	r_worldentity;
extern	vec3_t		modelorg;
extern	int			r_visframecount;	// ??? what difs?
extern	int			r_framecount;
extern	mplane_t	frustum[4];


//
// view origin
//
extern	vec3_t	vup;
extern	vec3_t	vpn;
extern	vec3_t	vright;
extern	vec3_t	r_origin;

//
// screen size info
//
extern	refdef_t	r_refdef;
extern	refdef_t	r_viewmodel_refdef;

extern	mleaf_t		*r_viewleaf, *r_oldviewleaf;
extern	texture_t	r_notexture_mip;
extern	int		d_lightstylevalue[256];	// 8.8 fraction of base light value

extern	cvar_t	r_clearcolor;
extern	cvar_t	r_norefresh;
extern	cvar_t	r_drawentities;
extern	cvar_t	r_drawworld;
extern	cvar_t	r_drawviewmodel;
extern	cvar_t	r_waterwarp;
extern	cvar_t	r_fullbright;
extern	cvar_t	r_lightmap;
extern	cvar_t	r_novis;
extern	cvar_t	r_wholeframe;

extern	cvar_t	gl_clear;
extern	cvar_t	gl_polyblend;

extern	const char *gl_vendor;
extern	const char *gl_renderer;
extern	const char *gl_version;
extern	const char *gl_extensions;

int R_TranslatePlayerSkin (int playernum);

byte *playerTranslation;
void R_AnimateLight (double time);

void R_BuildSurfaces (void);
void R_RegisterSurface (msurface_t *surf);
void R_BeginBuildingLightmaps (void);
void R_EndBuildingLightmaps (void);
void R_CreateSurfaceLightmap (msurface_t *surf);

void R_DrawTextureChain (msurface_t *surf);

void VCache_Init (void);
void VCache_ReorderIndices (unsigned short *outIndices, const unsigned short *indices, int nTriangles, int nVertices);

// dynamic lights
void R_AliasDlights (entity_t *e, aliashdr_t *hdr, QMATRIX *localMatrix);
void R_PushDlights (entity_t *e, model_t *mod, QMATRIX *localMatrix, mnode_t *headnode, int visframe);
void R_ClearTextureChains (model_t *mod);

extern int r_dlightframecount;

texture_t *R_TextureAnimation (texture_t *base, int frame);


#define COLOR_FROM_RGBA(r, g, b, a) \
	(unsigned int) (((a) << 24) | ((r) << 0) | ((g) << 8) | ((b) << 16))

extern	QMATRIX	r_view_matrix;
extern	QMATRIX	r_proj_matrix;
extern	QMATRIX	r_mvp_matrix;

void R_BuildTranslationTable (int playerclass, int color, unsigned *basepalette, unsigned *translated);

